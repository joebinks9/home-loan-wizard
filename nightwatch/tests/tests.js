const selectors = require('../supporting/selectors')
const functions = require('../supporting/functions')
const data = require('../supporting/data')


module.exports = {
    beforeEach: browser=> {
        browser.url('http://localhost:3000')
    },
    after: browser=> {
        browser.end()
    },

'test1': browser => {
    browser
        .click(selectors.buttons.homeBtn)
        .waitForElementVisible(selectors.pageHeaders.promptTextOne, 200)
        .click(`${selectors.dropDown.loanDropDown} ${selectors.dropDown.refinance}`)
        .click(`${selectors.dropDown.propertyDropDown} ${selectors.dropDown.singleFamily}`)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .setValue(selectors.fields.cityInput, data.test1.purchaseCity)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.rentalBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.noBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.noBtn)
        .waitForElementVisible(selectors.pageHeaders.promptTextOne, 200)
        .setValue(selectors.fields.priceInput, data.test1.purchasePrice)
        .setValue(selectors.fields.downInput, data.test1.downPayment)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.goodBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.bankruptcyBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .setValue(selectors.fields.addressOne, data.test1.address1)
        .setValue(selectors.fields.addressTwo, data.test1.address2)
        .setValue(selectors.fields.addressThree, data.test1.address3)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .setValue(selectors.fields.firstName, data.test1.firstName)
        .setValue(selectors.fields.lastName, data.test1.lastName)
        .setValue(selectors.fields.email, data.test1.email)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.summary.name, 200)
        browser.expect.element(selectors.summary.name).text.to.equal(data.test1.fullName)
        browser.expect.element(selectors.summary.email).text.to.equal(data.test1.email)
        browser.expect.element(selectors.summary.loanType).text.to.equal(data.test1.loan)
        browser.expect.element(selectors.summary.propertyType).text.to.equal(data.test1.propertyType)
        browser.expect.element(selectors.summary.propertyLocation).text.to.equal(data.test1.purchaseCity)
        browser.expect.element(selectors.summary.purchaseReason).text.to.equal(data.test1.purchaseReason)
        browser.expect.element(selectors.summary.propertyAlreadyLocated).text.to.equal(data.test1.propertyLocated)
        browser.expect.element(selectors.summary.agentAlreadyEngaged).text.to.equal(data.test1.agent)
        browser.expect.element(selectors.summary.price).text.to.equal(data.test1.purchasePrice)
        browser.expect.element(selectors.summary.downPayment).text.to.equal(data.test1.downPayment)
        browser.expect.element(selectors.summary.creditScore).text.to.equal(data.test1.creditScore)
        browser.expect.element(selectors.summary.creditHistory).text.to.equal(data.test1.creditHistory)
        browser.expect.element(selectors.summary.address1).text.to.equal(data.test1.address1)
        browser.expect.element(selectors.summary.address2).text.to.equal(data.test1.address2)
        browser.expect.element(selectors.summary.address3).text.to.equal(data.test1.address3)
        browser.click(selectors.buttons.sendBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        browser.expect.element(selectors.pageHeaders.promptText).text.to.contain('Thank you for choosing Home Loan Wizard, a representative will be in touch with you shortly to talk about further steps.')
},

'test2': browser => {
    browser
        .click(selectors.buttons.homeBtn)
        .waitForElementVisible(selectors.pageHeaders.promptTextOne, 200)
        .click(`${selectors.dropDown.loanDropDown} ${selectors.dropDown.purchase}`)
        .click(`${selectors.dropDown.propertyDropDown} ${selectors.dropDown.singleFamily}`)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.nextBtn)
        browser.expect.element(selectors.errors.errorMessage).text.to.contain('This field requires a City Name (letters, periods and dashes allowed) and a State abbreviation (separated by a comma, no longer than 30 characters) or a 5 digit zip code. i.e. "94111" and "San Francisco, CA"')
        browser.setValue(selectors.fields.cityInput, data.test2.purchaseCityV)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.primaryBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.yesBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.yesBtn)
        .waitForElementVisible(selectors.pageHeaders.promptTextOne, 200)
        .click(selectors.buttons.nextBtn)
        browser.expect.element(selectors.errors.doublePriceError).text.to.contain('The down payment needs to be a valid dollar amount, though it can be $0.')
        browser.expect.element(selectors.errors.doublePriceError).text.to.contain('The price needs to be a valid dollar amount, greater than $0, and no less than the down payment.')
        browser.setValue(selectors.fields.priceInput, data.test2.purchasePriceV)
        .setValue(selectors.fields.downInput, data.test2.downPaymentV)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.excellentBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.noBankruptcyBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.nextBtn)
        browser.expect.element(selectors.errors.addOneErrorMessage).text.to.contain('The first line of the address can only be between 5 and 50 characters long.')
        browser.expect.element(selectors.errors.addThreeErrorMessage).text.to.contain('The last line must follow a standard city, state zip format (San Francisco, CA 94111), with a valid state abbreviation. It also can be no longer than 50 characters total.')
        browser.setValue(selectors.fields.addressOne, data.test2.address1V)
        .setValue(selectors.fields.addressTwo, data.test2.address2V)
        .setValue(selectors.fields.addressThree, data.test2.address3V)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.pageHeaders.promptText, 200)
        .click(selectors.buttons.nextBtn)
        browser.expect.element(selectors.errors.addOneErrorMessage).text.to.contain('The first name must be between 1 and 30 characters long.')
        browser.expect.element(selectors.errors.addTwoErrorMessage).text.to.contain('The last name must be between 1 and 30 characters long.')
        browser.expect.element(selectors.errors.addThreeErrorMessage).text.to.contain('The email address must follow standard email format (i.e. andy@gmail.com), and cannot exceed 50 characters in length.')
        browser.setValue(selectors.fields.firstName, data.test2.firstNameV)
        .setValue(selectors.fields.lastName, data.test2.lastNameV)
        .setValue(selectors.fields.email, data.test2.emailV)
        .click(selectors.buttons.nextBtn)
        .waitForElementVisible(selectors.summary.name, 200)
        browser.expect.element(selectors.summary.name).text.to.equal(data.test2.fullName)
        browser.expect.element(selectors.summary.email).text.to.equal(data.test2.emailV)
        browser.expect.element(selectors.summary.loanType).text.to.equal(data.test2.loan)
        browser.expect.element(selectors.summary.propertyType).text.to.equal(data.test2.propertyType)
        browser.expect.element(selectors.summary.propertyLocation).text.to.equal(data.test2.purchaseCityV)
        browser.expect.element(selectors.summary.purchaseReason).text.to.equal(data.test2.purchaseReason)
        browser.expect.element(selectors.summary.propertyAlreadyLocated).text.to.equal(data.test2.propertyLocated)
        browser.expect.element(selectors.summary.agentAlreadyEngaged).text.to.equal(data.test2.agent)
        browser.expect.element(selectors.summary.price).text.to.equal(data.test2.purchasePriceV)
        browser.expect.element(selectors.summary.downPayment).text.to.equal(data.test2.downPaymentV)
        browser.expect.element(selectors.summary.creditScore).text.to.equal(data.test2.creditScore)
        browser.expect.element(selectors.summary.creditHistory).text.to.equal(data.test2.creditHistory)
        browser.expect.element(selectors.summary.address1).text.to.equal(data.test2.address1V)
        browser.expect.element(selectors.summary.address2).text.to.equal(data.test2.address2V)
        browser.expect.element(selectors.summary.address3).text.to.equal(data.test2.address3V)
        browser.click(selectors.buttons.restartBtn)
        .waitForElementVisible(selectors.pageHeaders.homeHeader, 200)
        browser.expect.element(selectors.pageHeaders.homeHeader).text.to.contain('Home Loan Wizard')
}
}